COMMANDS
----------------------------------------------
*** CLEARING DOCKER ***

# STOP ALL RUNNING CONTAINERS
docker stop $(docker ps -aq)

# REMOVE ALL STOPPED CONTAINERS
docker rm $(docker ps -aq)

# REMOVE ALL IMAGES
docker rmi $(docker images -q)

# REMOVE ALL STRAY VOLUMES IF ANY
docker volume rm $(docker volume ls -q)

----------------------------------------------
*** BASH INTO CONTAINER ***

#EXEC INTO DOCKER CONTAINER
docker exec -it [postgres] bash
* container name

#INTERACTIVE SHEL FOR POSTGRES
psql -U [matay]
* postgres user

#CHECKING DATABASES
\l

#CHANGE DATABASE
\c [customer]
*database name

#EXPANDED MODE (DETAILS)
\x

#EXIT PSQL
\q

#CLEAR SCREEN
CTRL + L

#DELETE
delete from flyway_schema_history;

#DROP TABLE
drop table flyway_schema_history;

#EXIT CONTAINER
ctrl + d

#SEQUENCE CHECK OR MOD
SELECT setval('customer_id_seq', 1, false);
SELECT currval('customer_id_seq')


----------------------------------------------


Command	Description
docker ps	            List running containers
docker ps -a	        List all containers (including stopped ones)
docker images	        List images
docker run <image>	    Run a container from an image
docker stop <container>	Stop a running container
docker rm <container>	Remove a stopped container
docker rmi <image>	    Remove an image
docker build <path/to/dockerfile>	    Build an image from a Dockerfile
docker tag <image> <new_name:tag>	    Tag an image with a new name and optional tag
docker login	        Log in to a Docker registry
docker push <image>	    Push an image to a Docker registry
docker pull <image>	    Pull an image from a Docker registry
docker exec -it <container> <command>	Execute a command in a running container
docker-compose up	    Start all services defined in a docker-compose.yml file
docker-compose down	    Stop all services defined in a docker-compose.yml file

----------------------------------------------
#RUNNING DOCKER IMAGE CHANGING DATABASE CONNECTION
docker run --name matay-social --rm -p 8080:8080 --network social-app_postgres matayyy/social-app --spring.datasource.url=jdbc:postgresql://db:5432/customer
*matayyy/social-app = my image
*social-app_postgres = name of application + network name
*--spring.datasource.url = changing variable inside application.properties
*db = name of container set in docker-compose
----------------------------------------------

FRONTEND
  cd React
  npm install
  npm run dev

  docker build . -t matayyy/social-app-react
  docker push matayyy/social-app-react

  docker run --rm --name social-app-react -p 3000:5173 matayyy/social-app-react

  docker exec -it social-app-react sh

  Build for AWS
  docker build . -t matayyy/social-app-react --build-arg api_base_url=http://social.eu-central-1.elasticbeanstalk.com:8080
  docker push matayyy/social-app-react
----------------------------------------------

DELETE FROM customer;
ALTER SEQUENCE customer_id_seq RESTART WITH 1;



--REACT--
npm install react-router-dom
npm i jwt-decode



